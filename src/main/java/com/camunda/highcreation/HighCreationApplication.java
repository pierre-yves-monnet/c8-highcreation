package com.camunda.highcreation;

import com.camunda.highcreation.worker.CheckUniqueTidWorker;
import com.camunda.highcreation.worker.GenerateTrafficWorker;
import io.camunda.zeebe.client.ZeebeClient;
import io.camunda.zeebe.client.api.command.CreateProcessInstanceCommandStep1;
import io.camunda.zeebe.client.api.worker.JobWorker;
import io.camunda.zeebe.client.impl.oauth.OAuthCredentialsProvider;
import io.camunda.zeebe.client.impl.oauth.OAuthCredentialsProviderBuilder;
import io.camunda.zeebe.spring.client.annotation.Deployment;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.autoconfigure.SpringBootApplication;

import java.time.Duration;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;

@SpringBootApplication
@Deployment(resources = "classpath:*.bpmn")

public class HighCreationApplication {
  // ----------------------------- Cloud
  private static final String ZEEBECLOUD_ADDRESS = "25fdd1e6-e4a1-4362-b49c-5eced08cb893.ont-1.zeebe.camunda.io:443";
  private static final String ZEEBECLOUD_CLIENT_ID = "OuR";

  private static final String ZEEBECLOUD_CLIENT_SECRET = "aa";
  private static final String ZEEBECLOUD_AUTHORIZATION_SERVER_URL = "https://login.cloud.camunda.io/oauth/token";
  private static final String ZEEBECLOUD_TOKEN_AUDIENCE = "zeebe.camunda.io";
  // ----------------------------- None authorization
  private static final String ZEEBE_BROKER_GATEWAY_ADDRESS = "127.0.0.1:26500";
  // Define in Identity : connect to localhost:8084 and create a client in Application
  // Open Identity at http://localhost:8084/. Login with demo/demo.
  private static final String ZEEBEIDENTITY_AUTHORIZATION_SERVER_URL = "http://localhost:18080/auth/realms/camunda-platform/protocol/openid-connect/token";
  private static final String ZEEBEMULTITENANCY_ZEEBE_BROKER_GATEWAY_ADDRESS = "127.0.0.1:26500";
  private static final String ZEEBEIDENTITY_TOKEN_AUDIENCE = "zeebe-api";

  // ----------------------------- Identity (multi tenancy) authorization
  // Generated by Identity:
  //Go to Applications > Add Application.
  //Select M2M. Call it "worker".
  //Click on the newly created "worker".
  //Go to "Tenants". Click "Assign Tenant". Select the Default Tenant.
  //Go to "Access to APIs". Click "Assign Permissions". Select "Zeebe API", then enable "write:*".
  //Go to "Application details", and copy the Client ID and Client secret.
  private static final String ZEEBEIDENTITY_CLIENT_ID = "worker";
  private static final String ZEEBEIDENTITY_CLIENT_SECRET = "";
  public static final ZEEBECONNECTION zeebeConnectionMode = ZEEBECONNECTION.LOCAL;
  static Logger logger = LoggerFactory.getLogger(HighCreationApplication.class);

  public static void main(String[] args) {

    ZeebeClient client = null;

    // JDK 11 form
    if (zeebeConnectionMode.equals(ZEEBECONNECTION.IDENTITY)) {
      OAuthCredentialsProvider credentialsProvider = new OAuthCredentialsProviderBuilder().authorizationServerUrl(
              ZEEBEIDENTITY_AUTHORIZATION_SERVER_URL)
          .audience(ZEEBEIDENTITY_TOKEN_AUDIENCE)
          .clientId(ZEEBEIDENTITY_CLIENT_ID)
          .clientSecret(ZEEBEIDENTITY_CLIENT_SECRET)
          .build();

      client = ZeebeClient.newClientBuilder()
          .gatewayAddress(ZEEBEMULTITENANCY_ZEEBE_BROKER_GATEWAY_ADDRESS)
          .credentialsProvider(credentialsProvider)
          .usePlaintext()
          .build();
      logger.info("Identity connection");
    }

    if (zeebeConnectionMode.equals(ZEEBECONNECTION.MULTITENANCY)) {
      OAuthCredentialsProvider credentialsProvider = new OAuthCredentialsProviderBuilder().authorizationServerUrl(
              ZEEBEIDENTITY_AUTHORIZATION_SERVER_URL)
          .audience(ZEEBEIDENTITY_TOKEN_AUDIENCE)
          .clientId(ZEEBEIDENTITY_CLIENT_ID)
          .clientSecret(ZEEBEIDENTITY_CLIENT_SECRET)
          .build();

      client = ZeebeClient.newClientBuilder()
          .gatewayAddress(ZEEBEMULTITENANCY_ZEEBE_BROKER_GATEWAY_ADDRESS)
          .credentialsProvider(credentialsProvider)
          .usePlaintext()
          // .defaultJobWorkerTenantIds(Arrays.asList("<default>", "red"))
          .build();
      logger.info("Identity(Multitenancy) connection");
    }

    if (zeebeConnectionMode.equals(ZEEBECONNECTION.CLOUD)) {
      final OAuthCredentialsProvider credentialsProvider = new OAuthCredentialsProviderBuilder().authorizationServerUrl(
              ZEEBECLOUD_AUTHORIZATION_SERVER_URL)
          .audience(ZEEBECLOUD_TOKEN_AUDIENCE)
          .clientId(ZEEBECLOUD_CLIENT_ID)
          .clientSecret(ZEEBECLOUD_CLIENT_SECRET)
          .build();

      client = ZeebeClient.newClientBuilder()
          .gatewayAddress(ZEEBECLOUD_ADDRESS)
          .credentialsProvider(credentialsProvider)
          .build();
      logger.info("Cloud connection");
    }

    if (zeebeConnectionMode.equals(ZEEBECONNECTION.LOCAL)) {
      client = ZeebeClient.newClientBuilder()
          .gatewayAddress(ZEEBE_BROKER_GATEWAY_ADDRESS)
          .usePlaintext()
          .defaultJobWorkerMaxJobsActive(10)
          .defaultJobTimeout(Duration.ofMillis(5 * 60 * 1000L))
          .numJobWorkerExecutionThreads(10)
          .defaultJobTimeout(Duration.ofMinutes(15))
          .build();
      logger.info("Local connection");
    }

    if (client==null)
      return;

    JobWorker checkUniqueTid = null;
    JobWorker generateTraffic = null;

    try {
      // Request the Cluster Topology
      logger.info("Connected to: " + client.newTopologyRequest().send().join());

      // Start a Job Worker
      checkUniqueTid = client.newWorker().jobType("check-unique-tid").handler(new CheckUniqueTidWorker()).open();
      generateTraffic = client.newWorker().jobType("generate-traffic").handler(new GenerateTrafficWorker()).open();

      createProcessInstances(client, 10000, true,"DuplicateIssue", null);

      // org.camunda.training.SpringApplication.run(PaymentApplication.class, args);

      // Terminate the worker with an Integer input
      Scanner sc = new Scanner(System.in);
      sc.nextInt();
      sc.close();
      checkUniqueTid.close();
      generateTraffic.close();

    } catch (Exception e) {
      e.printStackTrace();
    } finally {
      if (checkUniqueTid != null)
        checkUniqueTid.close();
      if (generateTraffic != null)
        generateTraffic.close();

    }
  }

  // private static final String ZEEBEMULTITENANCY_TENANT_ID = "<default>";
  // private static final boolean ZEEBEMULTITENANCY_SECURE_CONNECTION = false;
  // private static final String ZEEBEMULTITENANCY_CAMUNDA_CREDENTIALS_SCOPES = "Zeebe";
  // private static final String ZEEBEMULTITENANCY_CAMUNDA_OAUTH_URL = "http://localhost:18080/auth/realms/camunda-platform/protocol/openid-connect/token";

  /**
   * Create a process intances
   *
   * @param zeebeClient zeebeClient
   * @param processId   processID where the instance must be created
   * @param tenantId    tenant (if ZeebeConnectionMode == ZEEBECONNECTION.MULTITENANCY and tenantId !=null
   */
  public static void createProcessInstances(ZeebeClient zeebeClient,
                                            int numberOfProcess,
                                            boolean withResult,
                                            String processId,
                                            String tenantId) {
    long beg = System.currentTimeMillis();
    List<Integer> listTraffic = new ArrayList<>();
    for (int i = 0; i < 100; i++) {
      listTraffic.add(i);
    }

    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyyMMddHHmmss");

    // Format the date and time into a string
    String base = LocalDateTime.now().format(formatter);

    logger.info("Start generate {}", numberOfProcess, processId, tenantId);

    for (int i = 0; i < numberOfProcess; i++)
      try {
        Map<String, Object> variables = new HashMap<>();
        variables.put("tid", base + "-" + i);
        variables.put("listTraffic", listTraffic);
        CreateProcessInstanceCommandStep1.CreateProcessInstanceCommandStep3 processInstanceStep3 = zeebeClient.newCreateInstanceCommand()
            .bpmnProcessId(processId)
            .latestVersion()
            .variables(variables);

        if (zeebeConnectionMode.equals(ZEEBECONNECTION.MULTITENANCY) && tenantId != null) {
          processInstanceStep3 = processInstanceStep3.tenantId(tenantId);
        }

        // We use the join to force the callback, and then generate a duplicate PI
        if (withResult)
          processInstanceStep3.withResult().requestTimeout(Duration.ofMillis(1000*5)).send().join();
        else
           processInstanceStep3.send().join();




        if (i % 100 == 0) {
          long currentDelay = System.currentTimeMillis() - beg;
          if (currentDelay == 0)
            currentDelay = 1;
          logger.info("... generate {} in {} ms ( {}/s)", i, currentDelay, i / (currentDelay/1000));
        }

      } catch (Exception e) {
        logger.error("ERROR Create PI in Process[{}] Tenant[{}] : {}", processId, tenantId, e.getMessage());
        return;
      }
    long end = System.currentTimeMillis();

    logger.info("Create {} in {} ms ", numberOfProcess, end - beg);

  }

  public enum ZEEBECONNECTION {LOCAL, IDENTITY, CLOUD, MULTITENANCY}
}
